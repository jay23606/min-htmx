@page "/test"

@using System.Net

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Minimal htmx Example</title>
</head>
<body>

	<div hx-get="test2.html" hx-target="#result2" hx-vals="js:{a:1,b:2,c:3}" hx-headers="{'Authorization':'Bearer Token123','Custom-Header':'Value123'}">
    <button>Load Data</button>
</div>

<div id="result2">
</div>

@{
    // Retrieve values from the query string or use default values
    string firstName = "Joe";
    string lastName = "Blow";
    string email = "joe@blow.com";
	if(HttpContext.Request.HasFormContentType){
		firstName = Request.Form["firstName"].FirstOrDefault() ?? "";
		lastName = Request.Form["lastName"].FirstOrDefault() ?? "";
		email = Request.Form["email"].FirstOrDefault() ?? "";
	}
	string queryString = $"firstName={WebUtility.UrlEncode(firstName)}&lastName={WebUtility.UrlEncode(lastName)}&email={WebUtility.UrlEncode(email)}";
}

<div id='container'>
    <div><label>First Name</label>: @firstName</div>
    <div><label>Last Name</label>: @lastName</div>
    <div><label>Email</label>: @email</div>
		<button hx-get="/test2?@queryString" hx-target='#container' hx-after="alert('interesting')">
        Click To Edit
    </button>
</div>

<script>
	(function () {
		HTMLElement.prototype.on = function (e, fn) { this.addEventListener(e, fn) }
		HTMLElement.prototype.attr = function (attribute, value) { return value === undefined ? this.getAttribute(attribute) : (this.setAttribute(attribute, value), this) }
		const $ = s => document.querySelector(s), $$ = s => document.querySelectorAll(s);
		const $DP = (htmlString, selector) => (new DOMParser().parseFromString(htmlString, 'text/html').querySelector(selector)?.innerHTML || '');
		const httpVerbs = ['get', 'post', 'put', 'delete', 'patch'];

		document.addEventListener('DOMContentLoaded', () => run());

		const run = () => {
			httpVerbs.forEach(verb => {
				const els = $$(`[hx-${verb}]:not([hx-applied])`);
				els.forEach(el => {
					const url = el.attr(`hx-${verb}`), hxTarget = el.attr('hx-target'), hxTrigger = el.attr('hx-trigger');
					let targetEl = hxTarget ? $(hxTarget) : el;
					if (el instanceof HTMLFormElement) {
						el.on('submit', async (e) => {
							e.preventDefault();
							await fetchData(url, targetEl, el, { method: verb, body: new URLSearchParams(new FormData(el)) });
						});
					} else el.on(hxTrigger || getEventType(el), async () => await fetchData(url, targetEl, el, { method: verb }));
					el.attr('hx-applied', 'true');
				});
			});
		}

		const getEventType = (el) => (el instanceof HTMLInputElement || el instanceof HTMLSelectElement || el instanceof HTMLTextAreaElement) ? 'change' : 'click';

		const fetchData = async (url, targetEl, el, options = {}) => {
			const hxBefore = el.attr('hx-before'), hxAfter = el.attr('hx-after'), hxHeaders = el.attr('hx-headers'),
				hxVals = el.attr('hx-vals'), hxSwap = el.attr('hx-swap');
			if (hxBefore) eval(hxBefore);
			const method = options.method || 'get';
			if (hxVals) (method === 'get') ?
					url += '?' + (new URLSearchParams(parseAttributes(hxVals))).toString() :
					options.body = parseAttributes(hxVals);
			const response = await fetch(url, {
				...options,
				method,
				headers: {
					...options.headers,
					...parseAttributes(hxHeaders),
				},
			});
			if (!response.ok) throw new Error('Network response was not ok');
			const data = await response.text();
			const hxSelect = el.getAttribute('hx-select');
			applySwap(targetEl, data, hxSwap, hxSelect);
			if (hxAfter) eval(hxAfter);
			run();
		};

		const parseAttributes = (s) => s ? (s.startsWith('js:') ? Function(`return ${s.slice(3)}`)() : JSON.parse(s.replace(/'/g, '"'))) : {};

		const applySwap = (targetEl, data, hxSwap, hxSelect) => {
			const contentToInsert = (hxSelect) ? $DP(data, hxSelect) : data;
			const swapActions = {
				'outerHTML': () => targetEl.outerHTML = contentToInsert,
				'append': () => targetEl.innerHTML += contentToInsert,
				'prepend': () => targetEl.innerHTML = contentToInsert + targetEl.innerHTML,
				'before': () => targetEl.insertAdjacentHTML('beforebegin', contentToInsert),
				'after': () => targetEl.insertAdjacentHTML('afterend', contentToInsert),
				'default': () => targetEl.innerHTML = contentToInsert,
			};
			const selectedAction = swapActions[hxSwap] || swapActions['default'];
			selectedAction();
		};
	})();
	
</script>

</body>
</html>