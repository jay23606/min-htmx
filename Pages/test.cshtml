@page "/test"

@using System.Net

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Minimal htmx Example</title>
</head>
<body>

<div jx-get="test2.html" jx-target="#result2">
    <button>Load Data</button>
</div>

<div id="result2">
</div>


@{
    // Retrieve values from the query string or use default values
    string firstName = "Joe";
    string lastName = "Blow";
    string email = "joe@blow.com";
	if(HttpContext.Request.HasFormContentType){
		firstName = Request.Form["firstName"].FirstOrDefault() ?? "";
		lastName = Request.Form["lastName"].FirstOrDefault() ?? "";
		email = Request.Form["email"].FirstOrDefault() ?? "";
	}
	string queryString = $"firstName={WebUtility.UrlEncode(firstName)}&lastName={WebUtility.UrlEncode(lastName)}&email={WebUtility.UrlEncode(email)}";
}

<div id='container'>
    <div><label>First Name</label>: @firstName</div>
    <div><label>Last Name</label>: @lastName</div>
    <div><label>Email</label>: @email</div>
		<button jx-get="/test2?@queryString" jx-target='#container' jx-after-request="alert('interesting')">
        Click To Edit
    </button>
</div>

<script>
(function() {
	HTMLElement.prototype.on = function (e, fn){this.addEventListener(e, fn)}
	HTMLElement.prototype.attr = function(attribute, value){return value === undefined ? this.getAttribute(attribute) : (this.setAttribute(attribute, value), this)}
	const $ = s => document.querySelector(s), $$ = s => document.querySelectorAll(s);

	document.addEventListener('DOMContentLoaded', () => run() );
	
	const run = () => {
		const els = $$('[jx-get]:not([data-jx-applied]), [jx-put]:not([data-jx-applied])');
		els.forEach(el => {
			applyLogic(el);
			el.setAttribute('data-jx-applied', 'true');
		});
	}

	const applyLogic = (el) => {
		const url = el.attr('jx-get') || el.attr('jx-put'), jxTarget = el.attr('jx-target'), jxTrigger = el.attr('jx-trigger');
		let targetEl = el;
		if (jxTarget) targetEl = $(jxTarget);
		if (el instanceof HTMLFormElement) {
			el.on('submit', async (e) => {
				e.preventDefault();
				await fetchData(url, targetEl, el, { method: 'PUT', body: new URLSearchParams(new FormData(el)) });
			});
		} else {
			(jxTrigger) ? 
				el.on(jxTrigger, async () => await fetchData(url, targetEl, el)) :
				el.on('click', async () => await fetchData(url, targetEl, el));
		}
	}

	const fetchData = async (url, targetEl, el, options = {}) => {
		const jxBeforeRequest = el.attr('jx-before-request');
		const jxAfterRequest = el.attr('jx-after-request');
		if (jxBeforeRequest) eval(jxBeforeRequest);
		const response = await fetch(url, options);
		if (!response.ok) throw new Error('Network response was not ok');
		const data = await response.text();
		targetEl.innerHTML = data;
		if (jxAfterRequest) eval(jxAfterRequest);
		run();
	};

})();
	
</script>

</body>
</html>